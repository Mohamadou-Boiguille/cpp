#include <iostream>
#include <ostream>
#include <string>
#include <sstream>

class Contact
{
  public:
	std::string firstname;
	std::string lastname;
	std::string nickname;
	std::string phone;
	std::string secret;
};

class PhoneBook
{
  public:
	Contact book[8];

	static size_t nb_of_contacts;

	void print_research(std::string &element)
	{
		for (size_t i = 0; i < 10 - element.length(); i++)
			std::cout << " ";
		for (size_t i = 0; i < 10 && i < element.length(); i++)
		{
			if (i == 9 && element.length() > 10)
				std::cout << ".";
			else
				std::cout << element.at(i);
		}
	}

	void print_contact(size_t index)
	{
		std::cout << "\nfirstname         : " << book[index].firstname << "\n";
		std::cout << "lastname          : " << book[index].lastname << "\n";
		std::cout << "nickname          : " << book[index].nickname << "\n";
		std::cout << "phone             : " << book[index].phone << "\n";
		std::cout << "darkest secret    : " << book[index].secret << "\n";
	}

	size_t getValidIndex()
	{
		std::stringstream input;
		int index = -1;

		while (true)
		{
			std::cout << "Please enter the contact index : ";
			std::getline(std::cin, input);

			if (input == "home" || input == "HOME")
				return (99);
            input >> index;
            if (index >= 0 && index < (int)nb_of_contacts)
                return index;
            else
                std::cout << "Not a valid index - Enter 'home' to quit this menu" << std::endl;
		}

		return (index);
	}

	void choose_contact()
	{
		size_t contact_index;

		contact_index = getValidIndex();
		if (contact_index == 99)
			return ;
		else if (contact_index >= nb_of_contacts)
		{
			choose_contact();
		}
		else
			print_contact(contact_index);
	}

	void search()
	{
		size_t i = 0;
		if (nb_of_contacts == 0)
		{
			std::cout << "No contact" << std::endl;
			return ;
		}
		while (i < nb_of_contacts)
		{
			std::cout << "         ";
			std::cout << i << "|";
			print_research(book[i].firstname);
			std::cout << "|";
			print_research(book[i].lastname);
			std::cout << "|";
			print_research(book[i].nickname);
			std::cout << std::endl;
			i++;
		}
		if (nb_of_contacts)
			choose_contact();
	}

	void add()
	{
		static size_t i;
		std::string element;

		std::cout << "firstname: " << std::endl;
		std::getline(std::cin, book[i].firstname);
		std::cout << "lastname: " << std::endl;
		std::getline(std::cin, book[i].lastname);
		std::cout << "nickname: " << std::endl;
		std::getline(std::cin, book[i].nickname);
		std::cout << "phone: " << std::endl;
		std::getline(std::cin, book[i].phone);
		std::cout << "what is his/her darker secret: " << std::endl;
		std::getline(std::cin, book[i].secret);
		i++;
		if (nb_of_contacts < 8)
			nb_of_contacts++;
		if (i == 8)
			i = 0;
	}
};

int	main(void)
{
	PhoneBook	phone_book;

	std::string input;
	while (input != "EXIT" && input != "e")
	{
		std::cout << "\nBLACKMAIL PHONEBOOK" << std::endl;
		std::cout << "you can type : 'ADD', 'SEARCH' or 'EXIT'" << std::endl;
		std::getline(std::cin, input);
		if (input == "ADD" || input == "a")
			phone_book.add();
		else if (input == "SEARCH" || input == "s")
			phone_book.search();
		else if (input == "")
			continue ;
	}
	return (0);
}
